import type { OnExitFn, AsyncHook, OnAfterBuildFn, OnBeforeBuildFn, OnCloseDevServerFn, OnDevCompileDoneFn, ModifyBundlerChainFn, ModifyRspackConfigFn, ModifyWebpackChainFn, ModifyWebpackConfigFn, ModifyRsbuildConfigFn, OnAfterStartDevServerFn, OnBeforeStartDevServerFn, OnAfterStartProdServerFn, OnBeforeStartProdServerFn, OnAfterCreateCompilerFn, OnBeforeCreateCompilerFn } from '@rsbuild/shared';
export declare function createAsyncHook<Callback extends (...args: any[]) => any>(): AsyncHook<Callback>;
export declare function initHooks(): {
    /** parameters are not bundler-related */
    onExit: AsyncHook<OnExitFn>;
    onDevCompileDone: AsyncHook<OnDevCompileDoneFn>;
    onCloseDevServer: AsyncHook<OnCloseDevServerFn>;
    onAfterStartDevServer: AsyncHook<OnAfterStartDevServerFn>;
    onBeforeStartDevServer: AsyncHook<OnBeforeStartDevServerFn>;
    onAfterStartProdServer: AsyncHook<OnAfterStartProdServerFn>;
    onBeforeStartProdServer: AsyncHook<OnBeforeStartProdServerFn>;
    /** parameters are bundler-related */
    onAfterBuild: AsyncHook<OnAfterBuildFn>;
    onBeforeBuild: AsyncHook<OnBeforeBuildFn>;
    modifyRspackConfig: AsyncHook<ModifyRspackConfigFn>;
    modifyBundlerChain: AsyncHook<ModifyBundlerChainFn>;
    modifyWebpackChain: AsyncHook<ModifyWebpackChainFn>;
    modifyWebpackConfig: AsyncHook<ModifyWebpackConfigFn>;
    modifyRsbuildConfig: AsyncHook<ModifyRsbuildConfigFn>;
    onAfterCreateCompiler: AsyncHook<OnAfterCreateCompilerFn>;
    onBeforeCreateCompiler: AsyncHook<OnBeforeCreateCompilerFn>;
};
export type Hooks = ReturnType<typeof initHooks>;
