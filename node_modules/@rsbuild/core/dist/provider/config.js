"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var config_exports = {};
__export(config_exports, {
  normalizeConfig: () => normalizeConfig,
  withDefaultConfig: () => withDefaultConfig
});
module.exports = __toCommonJS(config_exports);
var import_node_path = require("node:path");
var import_shared = require("@rsbuild/shared");
var import_mergeConfig = require("../mergeConfig");
const getDefaultDevConfig = () => ({
  hmr: true,
  liveReload: true,
  assetPrefix: import_shared.DEFAULT_ASSET_PREFIX,
  startUrl: false
});
const getDefaultServerConfig = () => ({
  port: import_shared.DEFAULT_PORT,
  host: import_shared.DEFAULT_DEV_HOST,
  htmlFallback: "index",
  compress: true,
  printUrls: true,
  strictPort: false,
  publicDir: {
    name: "public",
    copyOnBuild: true
  }
});
const getDefaultSourceConfig = () => ({
  alias: {},
  define: {},
  aliasStrategy: "prefer-tsconfig",
  preEntry: [],
  decorators: {
    version: "legacy"
  }
});
const getDefaultHtmlConfig = () => ({
  meta: {
    charset: { charset: "UTF-8" },
    viewport: "width=device-width, initial-scale=1.0"
  },
  title: "Rsbuild App",
  inject: "head",
  mountId: import_shared.DEFAULT_MOUNT_ID,
  crossorigin: false,
  outputStructure: "flat",
  scriptLoading: "defer"
});
const getDefaultSecurityConfig = () => ({
  nonce: ""
});
const getDefaultToolsConfig = () => ({
  cssExtract: {
    loaderOptions: {},
    pluginOptions: {}
  }
});
const getDefaultPerformanceConfig = () => ({
  profile: false,
  buildCache: true,
  printFileSize: true,
  removeConsole: false,
  removeMomentLocale: false,
  chunkSplit: {
    strategy: "split-by-experience"
  }
});
const getDefaultOutputConfig = () => ({
  targets: ["web"],
  distPath: {
    root: import_shared.ROOT_DIST_DIR,
    js: import_shared.JS_DIST_DIR,
    css: import_shared.CSS_DIST_DIR,
    svg: import_shared.SVG_DIST_DIR,
    font: import_shared.FONT_DIST_DIR,
    html: import_shared.HTML_DIST_DIR,
    wasm: import_shared.WASM_DIST_DIR,
    image: import_shared.IMAGE_DIST_DIR,
    media: import_shared.MEDIA_DIST_DIR,
    server: import_shared.SERVER_DIST_DIR,
    worker: import_shared.SERVICE_WORKER_DIST_DIR
  },
  assetPrefix: import_shared.DEFAULT_ASSET_PREFIX,
  filename: {},
  charset: "ascii",
  polyfill: "usage",
  dataUriLimit: {
    svg: import_shared.DEFAULT_DATA_URL_SIZE,
    font: import_shared.DEFAULT_DATA_URL_SIZE,
    image: import_shared.DEFAULT_DATA_URL_SIZE,
    media: import_shared.DEFAULT_DATA_URL_SIZE
  },
  legalComments: "linked",
  injectStyles: false,
  disableMinimize: false,
  minify: true,
  sourceMap: {
    js: void 0,
    css: false
  },
  filenameHash: true,
  enableCssModuleTSDeclaration: false,
  inlineScripts: false,
  inlineStyles: false,
  cssModules: {
    auto: true,
    exportLocalsConvention: "camelCase"
  }
});
const createDefaultConfig = () => ({
  dev: getDefaultDevConfig(),
  server: getDefaultServerConfig(),
  html: getDefaultHtmlConfig(),
  source: getDefaultSourceConfig(),
  output: getDefaultOutputConfig(),
  tools: getDefaultToolsConfig(),
  security: getDefaultSecurityConfig(),
  performance: getDefaultPerformanceConfig()
});
function getDefaultEntry(root) {
  const files = [
    // Most projects are using typescript now.
    // So we put `.ts` as the first one to improve performance.
    "ts",
    "js",
    "tsx",
    "jsx",
    ".mjs",
    ".cjs"
  ].map((ext) => (0, import_node_path.join)(root, `src/index.${ext}`));
  const entryFile = (0, import_shared.findExists)(files);
  if (entryFile) {
    return {
      index: entryFile
    };
  }
  return {};
}
const withDefaultConfig = async (rootPath, config) => {
  const merged = (0, import_mergeConfig.mergeRsbuildConfig)(createDefaultConfig(), config);
  merged.source || (merged.source = {});
  if (!merged.source.entry) {
    merged.source.entry = getDefaultEntry(rootPath);
  }
  if (!merged.source.tsconfigPath) {
    const tsconfigPath = (0, import_node_path.join)(rootPath, import_shared.TS_CONFIG_FILE);
    if (await (0, import_shared.isFileExists)(tsconfigPath)) {
      merged.source.tsconfigPath = tsconfigPath;
    }
  }
  return merged;
};
const normalizeConfig = (config) => (0, import_mergeConfig.mergeRsbuildConfig)(createDefaultConfig(), config);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  normalizeConfig,
  withDefaultConfig
});
