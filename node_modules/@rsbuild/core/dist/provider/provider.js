"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var provider_exports = {};
__export(provider_exports, {
  rspackProvider: () => rspackProvider
});
module.exports = __toCommonJS(provider_exports);
var import_shared = require("@rsbuild/shared");
var import_createContext = require("./createContext");
var import_initConfigs = require("./initConfigs");
var import_initPlugins = require("./initPlugins");
var import_shared2 = require("./shared");
const rspackProvider = async ({
  pluginManager,
  rsbuildOptions,
  plugins
}) => {
  const rsbuildConfig = (0, import_shared.pickRsbuildConfig)(rsbuildOptions.rsbuildConfig);
  const context = await (0, import_createContext.createContext)(rsbuildOptions, rsbuildConfig, "rspack");
  const pluginAPI = (0, import_initPlugins.getPluginAPI)({ context, pluginManager });
  context.pluginAPI = pluginAPI;
  const createCompiler = async () => {
    const { createCompiler: createCompiler2 } = await Promise.resolve().then(() => __toESM(require("./createCompiler")));
    const { rspackConfigs } = await (0, import_initConfigs.initConfigs)({
      context,
      pluginManager,
      rsbuildOptions
    });
    return createCompiler2({
      context,
      rspackConfigs
    });
  };
  return {
    bundler: "rspack",
    pluginAPI,
    createCompiler,
    publicContext: (0, import_createContext.createPublicContext)(context),
    async applyDefaultPlugins() {
      pluginManager.addPlugins(await (0, import_shared2.applyDefaultPlugins)(plugins));
    },
    async getServerAPIs(options) {
      const { getServerAPIs } = await Promise.resolve().then(() => __toESM(require("../server/devServer")));
      const { createDevMiddleware } = await Promise.resolve().then(() => __toESM(require("./createCompiler")));
      await (0, import_initConfigs.initRsbuildConfig)({ context, pluginManager });
      return getServerAPIs(
        { context, pluginManager, rsbuildOptions },
        createDevMiddleware,
        options
      );
    },
    async startDevServer(options) {
      const { startDevServer } = await Promise.resolve().then(() => __toESM(require("../server/devServer")));
      const { createDevMiddleware } = await Promise.resolve().then(() => __toESM(require("./createCompiler")));
      await (0, import_initConfigs.initRsbuildConfig)({ context, pluginManager });
      return startDevServer(
        { context, pluginManager, rsbuildOptions },
        createDevMiddleware,
        options
      );
    },
    async preview(options) {
      const { startProdServer } = await Promise.resolve().then(() => __toESM(require("../server/prodServer")));
      await (0, import_initConfigs.initRsbuildConfig)({ context, pluginManager });
      return startProdServer(context, context.config, options);
    },
    async build(options) {
      const { build } = await Promise.resolve().then(() => __toESM(require("./build")));
      return build({ context, pluginManager, rsbuildOptions }, options);
    },
    async initConfigs() {
      const { rspackConfigs } = await (0, import_initConfigs.initConfigs)({
        context,
        pluginManager,
        rsbuildOptions
      });
      return rspackConfigs;
    },
    async inspectConfig(inspectOptions) {
      const { inspectConfig } = await Promise.resolve().then(() => __toESM(require("./inspectConfig")));
      return inspectConfig({
        context,
        pluginManager,
        rsbuildOptions,
        inspectOptions
      });
    }
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rspackProvider
});
