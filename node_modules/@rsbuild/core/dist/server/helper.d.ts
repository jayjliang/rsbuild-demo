/// <reference types="node" />
import type { Routes, DevConfig, PrintUrls, RsbuildEntry, RsbuildConfig, OutputStructure } from '@rsbuild/shared';
export declare const formatRoutes: (entry: RsbuildEntry, prefix: string | undefined, outputStructure: OutputStructure | undefined) => Routes;
export declare function printServerURLs({ urls: originalUrls, port, routes, protocol, printUrls, }: {
    urls: Array<{
        url: string;
        label: string;
    }>;
    port: number;
    routes: Routes;
    protocol: string;
    printUrls?: PrintUrls;
}): string | undefined;
/**
 * hmr socket connect path
 */
export declare const HMR_SOCK_PATH = "/rsbuild-hmr";
export declare const mergeDevOptions: ({ rsbuildConfig, port, }: {
    rsbuildConfig: RsbuildConfig;
    port: number;
}) => DevConfig;
/**
 * Get available free port.
 * @param port - Current port want to use.
 * @param tryLimits - Maximum number of retries.
 * @param strictPort - Whether to throw an error when the port is occupied.
 * @returns Available port number.
 */
export declare const getPort: ({ host, port, strictPort, tryLimits, silent, }: {
    host: string;
    port: string | number;
    strictPort: boolean;
    tryLimits?: number | undefined;
    silent?: boolean | undefined;
}) => Promise<number>;
export declare const getServerOptions: ({ rsbuildConfig, getPortSilently, }: {
    rsbuildConfig: RsbuildConfig;
    getPortSilently?: boolean | undefined;
}) => Promise<{
    port: number;
    host: string;
    https: boolean;
    serverConfig: import("@rsbuild/shared").ServerConfig;
}>;
export declare const getDevOptions: ({ rsbuildConfig, getPortSilently, }: {
    rsbuildConfig: RsbuildConfig;
    getPortSilently?: boolean | undefined;
}) => Promise<{
    devServerConfig: {
        hmr?: boolean | undefined;
        liveReload?: boolean | undefined;
        startUrl?: string | boolean | string[] | undefined;
        beforeStartUrl?: import("@rsbuild/shared").ArrayOrNot<() => void | Promise<void>> | undefined;
        assetPrefix?: string | boolean | undefined;
        progressBar?: boolean | import("@rsbuild/shared").ProgressBarConfig | undefined;
        client?: {
            path?: string | undefined;
            port?: string | undefined;
            host?: string | undefined;
            protocol?: "ws" | "wss" | undefined;
        } | undefined;
        setupMiddlewares?: ((middlewares: {
            unshift: (...handlers: import("@rsbuild/shared").RequestHandler[]) => void;
            push: (...handlers: import("@rsbuild/shared").RequestHandler[]) => void;
        }, server: import("@rsbuild/shared").ServerAPIs) => void)[] | undefined;
        writeToDisk?: boolean | ((filename: string) => boolean) | undefined;
        compress?: boolean | undefined;
        publicDir?: import("@rsbuild/shared").PublicDir | undefined;
        port?: number | undefined;
        https?: import("https").ServerOptions | undefined;
        host?: string | undefined;
        headers?: Record<string, string | string[]> | undefined;
        htmlFallback?: import("@rsbuild/shared").HtmlFallback | undefined;
        historyApiFallback?: boolean | import("@rsbuild/shared").HistoryApiFallbackOptions | undefined;
        proxy?: import("@rsbuild/shared").ProxyOptions | undefined;
        strictPort?: boolean | undefined;
        printUrls?: PrintUrls | undefined;
    };
    port: number;
    host: string;
    https: boolean;
}>;
