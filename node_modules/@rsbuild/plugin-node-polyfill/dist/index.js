"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  pluginNodePolyfill: () => pluginNodePolyfill
});
module.exports = __toCommonJS(src_exports);

// src/libs.ts
var libs_exports = {};
__export(libs_exports, {
  _stream_duplex: () => _stream_duplex,
  _stream_passthrough: () => _stream_passthrough,
  _stream_readable: () => _stream_readable,
  _stream_transform: () => _stream_transform,
  _stream_writable: () => _stream_writable,
  assert: () => assert,
  buffer: () => buffer,
  child_process: () => child_process,
  cluster: () => cluster,
  console: () => console,
  constants: () => constants,
  crypto: () => crypto,
  dgram: () => dgram,
  dns: () => dns,
  domain: () => domain,
  events: () => events,
  fs: () => fs,
  http: () => http,
  https: () => https,
  module: () => module2,
  net: () => net,
  os: () => os,
  path: () => path,
  process: () => process,
  punycode: () => punycode,
  querystring: () => querystring,
  readline: () => readline,
  repl: () => repl,
  stream: () => stream,
  string_decoder: () => string_decoder,
  sys: () => sys,
  timers: () => timers,
  tls: () => tls,
  tty: () => tty,
  url: () => url,
  util: () => util,
  vm: () => vm,
  zlib: () => zlib
});
var assert = require.resolve("assert/");
var buffer = require.resolve("buffer/");
var child_process = null;
var cluster = null;
var console = require.resolve("console-browserify");
var constants = require.resolve("constants-browserify");
var crypto = require.resolve("crypto-browserify");
var dgram = null;
var dns = null;
var domain = require.resolve("domain-browser");
var events = require.resolve("events/");
var fs = null;
var http = require.resolve("stream-http");
var https = require.resolve("https-browserify");
var module2 = null;
var net = null;
var os = require.resolve("os-browserify/browser.js");
var path = require.resolve("path-browserify");
var punycode = require.resolve("punycode/");
var process = require.resolve("process/browser.js");
var querystring = require.resolve("querystring-es3/");
var readline = null;
var repl = null;
var stream = require.resolve("stream-browserify");
var _stream_duplex = require.resolve("readable-stream/lib/_stream_duplex.js");
var _stream_passthrough = require.resolve("readable-stream/lib/_stream_passthrough.js");
var _stream_readable = require.resolve("readable-stream/lib/_stream_readable.js");
var _stream_transform = require.resolve("readable-stream/lib/_stream_transform.js");
var _stream_writable = require.resolve("readable-stream/lib/_stream_writable.js");
var string_decoder = require.resolve("string_decoder/");
var sys = require.resolve("util/util.js");
var timers = require.resolve("timers-browserify");
var tls = null;
var tty = require.resolve("tty-browserify");
var url = require.resolve("url/");
var util = require.resolve("util/util.js");
var vm = require.resolve("vm-browserify");
var zlib = require.resolve("browserify-zlib");

// src/index.ts
var getResolveFallback = (nodeLibs) => Object.keys(nodeLibs).reduce(
  (previous, name) => {
    if (nodeLibs[name]) {
      previous[name] = nodeLibs[name];
    } else {
      previous[name] = false;
    }
    return previous;
  },
  {}
);
var getProvideGlobals = async (globals) => {
  const result = {};
  if (globals?.Buffer !== false) {
    result.Buffer = [buffer, "Buffer"];
  }
  if (globals?.process !== false) {
    result.process = [process];
  }
  return result;
};
function pluginNodePolyfill(options = {}) {
  return {
    name: "rsbuild:node-polyfill",
    setup(api) {
      api.modifyBundlerChain(async (chain, { CHAIN_ID, isServer, bundler }) => {
        if (isServer) {
          return;
        }
        chain.resolve.fallback.merge(getResolveFallback(libs_exports));
        const provideGlobals = await getProvideGlobals(options.globals);
        if (Object.keys(provideGlobals).length) {
          chain.plugin(CHAIN_ID.PLUGIN.NODE_POLYFILL_PROVIDE).use(bundler.ProvidePlugin, [provideGlobals]);
        }
      });
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  pluginNodePolyfill
});
