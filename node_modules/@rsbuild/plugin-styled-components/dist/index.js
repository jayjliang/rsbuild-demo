"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  pluginStyledComponents: () => pluginStyledComponents
});
module.exports = __toCommonJS(src_exports);
var import_shared = require("@rsbuild/shared");
var pluginStyledComponents = (pluginOptions = {}) => ({
  name: "rsbuild:styled-components",
  setup(api) {
    if (api.context.bundlerType === "webpack") {
      return;
    }
    const getMergedOptions = () => {
      const useSSR = (0, import_shared.isServerTarget)(api.context.targets);
      const isProd = (0, import_shared.getNodeEnv)() === "production";
      return (0, import_shared.mergeChainedOptions)({
        defaults: (0, import_shared.getDefaultStyledComponentsConfig)(isProd, useSSR),
        options: pluginOptions
      });
    };
    api.modifyRsbuildConfig((userConfig, { mergeRsbuildConfig }) => {
      const extraConfig = {
        tools: {
          swc(opts) {
            const mergedOptions = getMergedOptions();
            if (!mergedOptions) {
              return opts;
            }
            opts.rspackExperiments ?? (opts.rspackExperiments = {});
            opts.rspackExperiments.styledComponents = mergedOptions;
            return opts;
          }
        }
      };
      return mergeRsbuildConfig(extraConfig, userConfig);
    });
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  pluginStyledComponents
});
